load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@npm//@babel/cli:index.bzl", "babel")
load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@npm//@bazel/typescript:index.bzl", "ts_devserver")
load("@npm//history-server:index.bzl", "history_server")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("//tools:defaults.bzl", "ng_ts_library")

package(default_visibility = ["//visibility:public"])

# Run the sass compiler to output "styles.css"
sass_binary(
    name = "styles",
    src = "styles.scss",
    include_paths = ["external/npm/node_modules"],
    sourcemap = False,
    deps = ["//src/angular/styles:typography_lib"],
)

ng_ts_library(
    name = "showcase-merge",
    srcs = glob(
        include = ["*.ts"],
        exclude = [
            "**/*.spec.ts",
            "main.ts",
        ],
    ),
    tsconfig = ":tsconfig.json",
    deps = [
        "//src/showcase-merge/app",
        "@npm//@angular/core",
        "@npm//@angular/localize",
        "@npm//@angular/platform-browser",
        "@npm//core-js",
    ],
)

_ASSETS = [
    ":styles.css",
    "@npm//:node_modules/highlight.js/styles/github.css",
    "@npm//:node_modules/zone.js/dist/zone.min.js",
    "@npm//:node_modules/@angular/localize/bundles/localize-init.umd.min.js",
]

# Insert script tags into index.html
# Supports differential loading by providing a.js and a.mjs
html_insert_assets(
    name = "index_html_dev",
    outs = ["_/index.html"],
    args = [
        "--html",
        "$(execpath :index.html)",
        "--out",
        "$@",
        "--roots",
        "$(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS] + [
        "./_/ts_scripts.js",
    ],
    data = [":index.html"] + _ASSETS,
)

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# named UMD and named AMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    additional_root_paths = [
        "sbb_angular/src/showcase-merge/_",
        "npm/node_modules/core-js/client",
    ],
    entry_module = "sbb_angular/src/showcase-merge/main.dev",
    port = 4200,
    scripts = [
        "//tools/esri-loader:esri_loader_umd_module",
        "@npm//:node_modules/tslib/tslib.js",
        "//tools/rxjs:rxjs_umd_modules",
    ],
    static_files = _ASSETS + [
        "@npm//:node_modules/core-js/client/core.min.js",
        ":index_html_dev",
        "//src/showcase-merge/assets",
    ],
    deps = [
        "//src/showcase-merge",
        "//src/showcase-merge/assets",
    ],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.prod.ts": "index",
    },
    output_dir = True,
    tags = ["prod-showcase-merge"],
    deps = [
        "//src/showcase-merge",
        "@npm//@rollup/plugin-alias",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

babel(
    name = "bundle-es5",
    args = [
        "$(execpath :bundle-es2015)",
        "--no-babelrc",
        "--source-maps",
        "--presets=@babel/preset-env",
        "--plugins=@babel/plugin-transform-modules-systemjs",
        "--out-dir",
        "$(@D)",
    ],
    data = [
        ":bundle-es2015",
        "@npm//@babel/plugin-transform-modules-systemjs",
        "@npm//@babel/preset-env",
    ],
    output_dir = True,
    tags = ["prod-showcase-merge"],
)

terser_minified(
    name = "bundle-es2015.min",
    src = ":bundle-es2015",
    sourcemap = False,
    tags = ["prod-showcase-merge"],
)

terser_minified(
    name = "bundle-es5.min",
    src = ":bundle-es5",
    sourcemap = False,
    tags = ["prod-showcase-merge"],
)

terser_minified(
    name = "regenerator",
    src = "@npm//:node_modules/regenerator-runtime/runtime.js",
    sourcemap = False,
    tags = ["prod-showcase-merge"],
)

genrule(
    name = "stamp_index",
    srcs = ["index.prod.html"],
    outs = ["stamped_index.html"],
    cmd = "sed \"s/TIMESTAMP-VARIABLE/$$(date +%s)/g\" $< > $@",
)

# Insert script tags into index.html
# Supports differential loading by providing a.js and a.mjs
html_insert_assets(
    name = "index_html_prod",
    # we can't output "src/showcase-merge/index.html" since that collides with the devmode file.
    # pkg_web rule will re-root paths that start with _{name} by default
    # so we output "_prodapp/src/index.html" so that it is mapped to
    # `index.html` in the web package.
    outs = ["_prodapp/src/index.html"],
    args = [
        "--html",
        "$(execpath :stamped_index.html)",
        "--out",
        "$@",
        "--roots",
        "$(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS],
    data = _ASSETS + [
        ":stamped_index.html",
    ],
    tags = ["prod-showcase-merge"],
)

pkg_web(
    name = "prodapp",
    srcs = _ASSETS + [
        ":bundle-es2015.min",
        ":bundle-es5.min",
        ":index_html_prod",
        ":regenerator",
        "//src/showcase-merge/assets",
        # Include polyfills that will be requested by old browsers
        "@npm//:node_modules/systemjs/dist/system.min.js",
        "@npm//:node_modules/core-js/client/core.min.js",
    ],
    # In production mode we serve some polyfills with script tags that have hard-coded paths in the index.html
    # so we must serve them at that path, by stripping a prefix
    additional_root_paths = [
        "src/showcase-merge/_prodapp/src",
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
    ],
    tags = ["prod-showcase-merge"],
)

history_server(
    name = "prodserver",
    args = [
        "--port",
        "4200",
    ],
    data = [":prodapp"],
    tags = ["prod-showcase-merge"],
    templated_args = [
        "-a",
        "$$(rlocation $(rootpath :prodapp))",
    ],
)

exports_files([
    "tsconfig.json",
])
